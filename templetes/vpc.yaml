AWSTemplateFormatVersion: '2010-09-09'
Description: Create VPC, Subnets, EFS with Access points and EC2.

Resources:
  CustomVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 172.31.0.0/16
  
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref CustomVPC
      AvailabilityZone: us-east-1a
      CidrBlock: 172.31.1.0/24
      MapPublicIpOnLaunch: true
  
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref CustomVPC
      AvailabilityZone: us-east-1b
      CidrBlock: 172.31.2.0/24
      MapPublicIpOnLaunch: true
  
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref CustomVPC
      AvailabilityZone: us-east-1a
      CidrBlock: 172.31.3.0/24
      MapPublicIpOnLaunch: false
  
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref CustomVPC
      AvailabilityZone: us-east-1b
      CidrBlock: 172.31.4.0/24
      MapPublicIpOnLaunch: false
  
  
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref 'AWS::StackName']]
        - Key: Network
          Value: Public
  
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref CustomVPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref CustomVPC
      Tags:
        - Key: Network
          Value: Public
  
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  
  NatGateway:
    Type: "AWS::EC2::NatGateway"
    DependsOn: NatPublicIP
    Properties: 
      AllocationId: !GetAtt NatPublicIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  
  NatPublicIP:
    Type: "AWS::EC2::EIP"
    DependsOn: CustomVPC
    Properties:
      Domain: vpc
  
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref CustomVPC
      Tags:
        - Key: Network
          Value: Private
  
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  
  PrivateSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  CustomSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: security group for Lambda in VPC
      GroupDescription: Manages the access to and from the EC2 ins.
      VpcId: !Ref CustomVPC
      SecurityGroupEgress:
        - Description: Egress port of the http
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
        - Description: Egress port of the https
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443



Outputs:

  CustomSecurityGroup:
    Description: Default Security Group
    Value: !GetAtt CustomSecurityGroup

  PrivateSubnet1:
    Description: Subnet 1 in the VPC
    Value: !Ref PrivateSubnet1
  
  PrivateSubnet2:
    Description: Subnet 2 in the VPC
    Value: !Ref PrivateSubnet2

  CustomVPC:
    Description: The Mount Target VPC Id
    Value: !Ref CustomVPC

  PrivateRouteTable:
    Description: The Mount Target VPC Id
    Value: !Ref PrivateRouteTable